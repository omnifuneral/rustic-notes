#!/usr/bin/env python3

import curses
import os
from datetime import datetime

NOTE_DIR = os.path.expanduser("~/rustic-notes/notes")
os.makedirs(NOTE_DIR, exist_ok=True)

# Save a note with optional tags
def save_note_curses(content, tags=None):
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    filename = f"{NOTE_DIR}/{timestamp}.txt"
    with open(filename, 'w') as file:
        file.write(f"Tags: {', '.join(tags) if tags else 'None'}\n")
        file.write(f"Date: {timestamp}\n\n")
        file.write(content)

# List all notes (returns a list of tuples with the note data)
def list_notes_curses():
    files = sorted(os.listdir(NOTE_DIR), reverse=True)
    notes = []
    for filename in files:
        with open(f"{NOTE_DIR}/{filename}", 'r') as file:
            lines = file.readlines()
            tags = lines[0].strip().replace("Tags: ", "")
            preview = lines[3][:50] + "..." if len(lines) > 3 else "No content"
            date = lines[1].strip().replace("Date: ", "")
            notes.append((filename, tags, preview, date))
    return notes

# Read a specific note's full content by ID
def read_note_by_id_curses(note_id):
    files = sorted(os.listdir(NOTE_DIR), reverse=True)
    try:
        filename = files[int(note_id) - 1]
        with open(f"{NOTE_DIR}/{filename}", 'r') as file:
            return file.read()
    except (IndexError, ValueError):
        return None

# Delete a specific note by ID
def delete_note_by_id_curses(note_id):
    files = sorted(os.listdir(NOTE_DIR), reverse=True)
    try:
        filename = files[int(note_id) - 1]
        os.remove(f"{NOTE_DIR}/{filename}")
        return True
    except (IndexError, ValueError):
        return False

# Search notes by keyword
def search_notes_curses(keyword):
    files = sorted(os.listdir(NOTE_DIR), reverse=True)
    results = []
    for filename in files:
        with open(f"{NOTE_DIR}/{filename}", 'r') as file:
            lines = file.readlines()
            tags = lines[0].strip().replace("Tags: ", "")
            content = ''.join(lines[3:])
            if keyword.lower() in tags.lower() or keyword.lower() in content.lower():
                results.append((filename, tags, content[:50], lines[1].strip().replace("Date: ", "")))
    return results

# Simple curses TUI
def curses_tui(stdscr):
    # Curses setup
    curses.curs_set(0)  # Hide the cursor
    stdscr.clear()
    stdscr.refresh()

    # Load and display the notes
    notes = list_notes_curses()
    current_row = 0

    def display_notes(note_list):
        stdscr.clear()
        h, w = stdscr.getmaxyx()
        for idx, (filename, tags, preview, date) in enumerate(note_list):
            x = 0
            y = idx
            if y >= h - 1:  # Don't let content overflow
                break
            if idx == current_row:
                stdscr.attron(curses.color_pair(1))
                stdscr.addstr(y, x, f"{tags[:15]:<15} {preview[:40]:<40} {date:<20}")
                stdscr.attroff(curses.color_pair(1))
            else:
                stdscr.addstr(y, x, f"{tags[:15]:<15} {preview[:40]:<40} {date:<20}")
        stdscr.refresh()

    # Display full content of a note
    def display_note_content(note_content):
        stdscr.clear()
        stdscr.addstr(0, 0, "Reading note:")
        lines = note_content.splitlines()
        for idx, line in enumerate(lines):
            if idx + 2 >= curses.LINES - 1:
                break
            stdscr.addstr(idx + 2, 0, line)
        stdscr.addstr(len(lines) + 4, 0, "Press any key to return.")
        stdscr.getch()

    # Show a help screen
    def display_help():
        stdscr.clear()
        stdscr.addstr(0, 0, "Help - Keybindings:")
        stdscr.addstr(2, 0, "k - Move up")
        stdscr.addstr(3, 0, "j - Move down")
        stdscr.addstr(4, 0, "Enter - Read note")
        stdscr.addstr(5, 0, "d - Delete note")
        stdscr.addstr(6, 0, "/ - Search notes")
        stdscr.addstr(7, 0, "a - Add a note")
        stdscr.addstr(8, 0, "q - Quit")
        stdscr.addstr(10, 0, "Press any key to return.")
        stdscr.getch()

    # Confirm note deletion
    def confirm_delete():
        stdscr.clear()
        stdscr.addstr(0, 0, "Are you sure you want to delete this note? (y/n)")
        stdscr.refresh()
        while True:
            key = stdscr.getch()
            if key == ord('y'):
                return True
            elif key == ord('n'):
                return False

    # Key navigation with vim-style keybindings
    while True:
        curses.init_pair(1, curses.COLOR_BLACK, curses.COLOR_WHITE)  # Highlight row
        display_notes(notes)
        key = stdscr.getch()

        # Vim-style navigation: 'k' for up, 'j' for down, 'd' for delete, 'q' to quit, 'Enter' to read, '?' for help
        if key in [ord('k'), curses.KEY_UP] and current_row > 0:
            current_row -= 1
        elif key in [ord('j'), curses.KEY_DOWN] and current_row < len(notes) - 1:
            current_row += 1
        elif key == ord('q'):
            break  # Quit the app
        elif key == ord('a'):
            add_note_curses(stdscr)
            notes = list_notes_curses()  # Refresh note list after adding
        elif key == ord('d'):
            if confirm_delete():
                if delete_note_by_id_curses(current_row + 1):
                    stdscr.addstr(len(notes) + 2, 0, f"Note {current_row + 1} deleted.")
                    stdscr.getch()  # Wait for keypress
                    notes = list_notes_curses()  # Refresh notes after deletion
        elif key == 10:  # Enter key to read the selected note
            note_content = read_note_by_id_curses(current_row + 1)
            if note_content:
                display_note_content(note_content)
        elif key == ord('/'):
            search_notes_curses_tui(stdscr)
            notes = list_notes_curses()  # Refresh notes after search
        elif key == ord('?'):
            display_help()

# Add a new note with curses input
def add_note_curses(stdscr):
    curses.curs_set(1)  # Show cursor for typing
    stdscr.clear()
    stdscr.addstr(0, 0, "Enter note content: ")
    curses.echo()

    content = stdscr.getstr(1, 0).decode("utf-8")  # Capture user input for the note content

    # Optional: Tags input
    stdscr.addstr(2, 0, "Enter tags (comma-separated, optional): ")
    tags_input = stdscr.getstr(3, 0).decode("utf-8")
    tags = [tag.strip() for tag in tags_input.split(',') if tag.strip()]  # Clean up tags

    save_note_curses(content, tags)
    stdscr.addstr(5, 0, "Note saved! Press any key to return.")
    stdscr.getch()

    curses.curs_set(0)  # Hide cursor again

# Search notes with a curses prompt
def search_notes_curses_tui(stdscr):
    curses.curs_set(1)  # Show cursor
    stdscr.clear()
    stdscr.addstr(0, 0, "Enter search keyword: ")
    curses.echo()

    keyword = stdscr.getstr(1, 0).decode("utf-8")  # Capture user input for search
    results = search_notes_curses(keyword)

    stdscr.clear()
    stdscr.addstr(0, 0, f"Results for '{keyword}':")
    for i, (filename, tags, preview, date) in enumerate(results):
        stdscr.addstr(i + 2, 0, f"[{i+1}] {tags[:15]:<15} {preview[:40]:<40} {date:<20}")
    stdscr.addstr(len(results) + 4, 0, "Press any key to return.")
    stdscr.getch()

    curses.curs_set(0)  # Hide cursor again

# Run the TUI
if __name__ == "__main__":
    curses.wrapper(curses_tui)


